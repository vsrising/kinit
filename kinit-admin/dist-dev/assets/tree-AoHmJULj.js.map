{"version":3,"file":"tree-AoHmJULj.js","sources":["../../src/utils/tree.ts"],"sourcesContent":["interface TreeHelperConfig {\n  id: string\n  children: string\n  pid: string\n}\nconst DEFAULT_CONFIG: TreeHelperConfig = {\n  id: 'id',\n  children: 'children',\n  pid: 'pid'\n}\n\nconst getConfig = (config: Partial<TreeHelperConfig>) => Object.assign({}, DEFAULT_CONFIG, config)\n\n// tree from list\nexport const listToTree = <T = any>(list: any[], config: Partial<TreeHelperConfig> = {}): T[] => {\n  const conf = getConfig(config) as TreeHelperConfig\n  const nodeMap = new Map()\n  const result: T[] = []\n  const { id, children, pid } = conf\n\n  for (const node of list) {\n    node[children] = node[children] || []\n    nodeMap.set(node[id], node)\n  }\n  for (const node of list) {\n    const parent = nodeMap.get(node[pid])\n    ;(parent ? parent.children : result).push(node)\n  }\n  return result\n}\n\nexport const treeToList = <T = any>(tree: any, config: Partial<TreeHelperConfig> = {}): T => {\n  config = getConfig(config)\n  const { children } = config\n  const result: any = [...tree]\n  for (let i = 0; i < result.length; i++) {\n    if (!result[i][children!]) continue\n    result.splice(i + 1, 0, ...result[i][children!])\n  }\n  return result\n}\n\nexport const findNode = <T = any>(\n  tree: any,\n  func: Fn,\n  config: Partial<TreeHelperConfig> = {}\n): T | null => {\n  config = getConfig(config)\n  const { children } = config\n  const list = [...tree]\n  for (const node of list) {\n    if (func(node)) return node\n    node[children!] && list.push(...node[children!])\n  }\n  return null\n}\n\nexport const findNodeAll = <T = any>(\n  tree: any,\n  func: Fn,\n  config: Partial<TreeHelperConfig> = {}\n): T[] => {\n  config = getConfig(config)\n  const { children } = config\n  const list = [...tree]\n  const result: T[] = []\n  for (const node of list) {\n    func(node) && result.push(node)\n    node[children!] && list.push(...node[children!])\n  }\n  return result\n}\n\nexport const findPath = <T = any>(\n  tree: any,\n  func: Fn,\n  config: Partial<TreeHelperConfig> = {}\n): T | T[] | null => {\n  config = getConfig(config)\n  const path: T[] = []\n  const list = [...tree]\n  const visitedSet = new Set()\n  const { children } = config\n  while (list.length) {\n    const node = list[0]\n    if (visitedSet.has(node)) {\n      path.pop()\n      list.shift()\n    } else {\n      visitedSet.add(node)\n      node[children!] && list.unshift(...node[children!])\n      path.push(node)\n      if (func(node)) {\n        return path\n      }\n    }\n  }\n  return null\n}\n\nexport const findPathAll = (tree: any, func: Fn, config: Partial<TreeHelperConfig> = {}) => {\n  config = getConfig(config)\n  const path: any[] = []\n  const list = [...tree]\n  const result: any[] = []\n  const visitedSet = new Set(),\n    { children } = config\n  while (list.length) {\n    const node = list[0]\n    if (visitedSet.has(node)) {\n      path.pop()\n      list.shift()\n    } else {\n      visitedSet.add(node)\n      node[children!] && list.unshift(...node[children!])\n      path.push(node)\n      func(node) && result.push([...path])\n    }\n  }\n  return result\n}\n\nexport const filter = <T = any>(\n  tree: T[],\n  func: (n: T) => boolean,\n  config: Partial<TreeHelperConfig> = {}\n): T[] => {\n  config = getConfig(config)\n  const children = config.children as string\n  function listFilter(list: T[]) {\n    return list\n      .map((node: any) => ({ ...node }))\n      .filter((node) => {\n        node[children] = node[children] && listFilter(node[children])\n        return func(node) || (node[children] && node[children].length)\n      })\n  }\n  return listFilter(tree)\n}\n\nexport const forEach = <T = any>(\n  tree: T[],\n  func: (n: T) => any,\n  config: Partial<TreeHelperConfig> = {}\n): void => {\n  config = getConfig(config)\n  const list: any[] = [...tree]\n  const { children } = config\n  for (let i = 0; i < list.length; i++) {\n    // func 返回true就终止遍历，避免大量节点场景下无意义循环，引起浏览器卡顿\n    if (func(list[i])) {\n      return\n    }\n    children && list[i][children] && list.splice(i + 1, 0, ...list[i][children])\n  }\n}\n\n/**\n * @description: Extract tree specified structure\n */\nexport const treeMap = <T = any>(\n  treeData: T[],\n  opt: { children?: string; conversion: Fn }\n): T[] => {\n  return treeData.map((item) => treeMapEach(item, opt))\n}\n\n/**\n * @description: Extract tree specified structure\n */\nexport const treeMapEach = (\n  data: any,\n  { children = 'children', conversion }: { children?: string; conversion: Fn }\n) => {\n  const haveChildren = Array.isArray(data[children]) && data[children].length > 0\n  const conversionData = conversion(data) || {}\n  if (haveChildren) {\n    return {\n      ...conversionData,\n      [children]: data[children].map((i: number) =>\n        treeMapEach(i, {\n          children,\n          conversion\n        })\n      )\n    }\n  } else {\n    return {\n      ...conversionData\n    }\n  }\n}\n\n/**\n * 递归遍历树结构\n * @param treeDatas 树\n * @param callBack 回调\n * @param parentNode 父节点\n */\nexport const eachTree = (treeDatas: any[], callBack: Fn, parentNode = {}) => {\n  treeDatas.forEach((element) => {\n    const newNode = callBack(element, parentNode) || element\n    if (element.children) {\n      eachTree(element.children, callBack, newNode)\n    }\n  })\n}\n"],"names":["DEFAULT_CONFIG","getConfig","config","treeToList","tree","children","result","i","findPath","func","path","list","visitedSet","node","filter","listFilter","__spreadValues","eachTree","treeDatas","callBack","parentNode","element","newNode"],"mappings":"yVAKA,MAAMA,EAAmC,CACvC,GAAI,KACJ,SAAU,WACV,IAAK,KACP,EAEMC,EAAaC,GAAsC,OAAO,OAAO,GAAIF,EAAgBE,CAAM,EAoBpFC,EAAa,CAAUC,EAAWF,EAAoC,KAAU,CAC3FA,EAASD,EAAUC,CAAM,EACnB,KAAA,CAAE,SAAAG,CAAa,EAAAH,EACfI,EAAc,CAAC,GAAGF,CAAI,EAC5B,QAASG,EAAI,EAAGA,EAAID,EAAO,OAAQC,IAC5BD,EAAOC,CAAC,EAAEF,CAAS,GACjBC,EAAA,OAAOC,EAAI,EAAG,EAAG,GAAGD,EAAOC,CAAC,EAAEF,CAAS,CAAC,EAE1C,OAAAC,CACT,EAiCaE,EAAW,CACtBJ,EACAK,EACAP,EAAoC,CAAA,IACjB,CACnBA,EAASD,EAAUC,CAAM,EACzB,MAAMQ,EAAY,CAAA,EACZC,EAAO,CAAC,GAAGP,CAAI,EACfQ,MAAiB,IACjB,CAAE,SAAAP,CAAa,EAAAH,EACrB,KAAOS,EAAK,QAAQ,CACZ,MAAAE,EAAOF,EAAK,CAAC,EACf,GAAAC,EAAW,IAAIC,CAAI,EACrBH,EAAK,IAAI,EACTC,EAAK,MAAM,UAEXC,EAAW,IAAIC,CAAI,EACnBA,EAAKR,CAAS,GAAKM,EAAK,QAAQ,GAAGE,EAAKR,CAAS,CAAC,EAClDK,EAAK,KAAKG,CAAI,EACVJ,EAAKI,CAAI,EACJ,OAAAH,CAGb,CACO,OAAA,IACT,EAwBaI,EAAS,CACpBV,EACAK,EACAP,EAAoC,CAAA,IAC5B,CACRA,EAASD,EAAUC,CAAM,EACzB,MAAMG,EAAWH,EAAO,SACxB,SAASa,EAAWJ,EAAW,CACtB,OAAAA,EACJ,IAAKE,GAAeG,EAAA,GAAKH,EAAO,EAChC,OAAQA,IACFA,EAAAR,CAAQ,EAAIQ,EAAKR,CAAQ,GAAKU,EAAWF,EAAKR,CAAQ,CAAC,EACrDI,EAAKI,CAAI,GAAMA,EAAKR,CAAQ,GAAKQ,EAAKR,CAAQ,EAAE,OACxD,CACL,CACA,OAAOU,EAAWX,CAAI,CACxB,EA6Daa,EAAW,CAACC,EAAkBC,EAAcC,EAAa,CAAA,IAAO,CACjEF,EAAA,QAASG,GAAY,CAC7B,MAAMC,EAAUH,EAASE,EAASD,CAAU,GAAKC,EAC7CA,EAAQ,UACDJ,EAAAI,EAAQ,SAAUF,EAAUG,CAAO,CAC9C,CACD,CACH"}