{"version":3,"file":"DictType.vue_vue_type_script_setup_true_lang-oV3pPULW.js","sources":["../../src/views/Vadmin/System/Dict/Type/DictType.vue"],"sourcesContent":["<script setup lang=\"tsx\">\nimport { reactive, ref, unref } from 'vue'\nimport {\n  getDictTypeListApi,\n  addDictTypeListApi,\n  delDictTypeListApi,\n  putDictTypeListApi,\n  getDictTypeApi\n} from '@/api/vadmin/system/dict'\nimport { useTable } from '@/hooks/web/useTable'\nimport { useI18n } from '@/hooks/web/useI18n'\nimport { Table, TableColumn } from '@/components/Table'\nimport { ElMessage, ElSwitch, ElRow, ElCol } from 'element-plus'\nimport { Search } from '@/components/Search'\nimport { FormSchema } from '@/components/Form'\nimport { ContentWrap } from '@/components/ContentWrap'\nimport Write from './components/Write.vue'\nimport { Dialog } from '@/components/Dialog'\nimport { Icon } from '@/components/Icon'\nimport { useClipboard } from '@vueuse/core'\nimport { BaseButton } from '@/components/Button'\n\nconst { t } = useI18n()\n\nconst { tableRegister, tableState, tableMethods } = useTable({\n  fetchDataApi: async () => {\n    const { pageSize, currentPage } = tableState\n    const res = await getDictTypeListApi({\n      page: unref(currentPage),\n      limit: unref(pageSize),\n      ...unref(searchParams)\n    })\n    return {\n      list: res.data || [],\n      total: res.count || 0\n    }\n  },\n  fetchDelApi: async (value) => {\n    const res = await delDictTypeListApi(value)\n    if (res.code === 200) {\n      await clearCurrentRow()\n    }\n    return res.code === 200\n  }\n})\n\nconst { dataList, loading, total, pageSize, currentPage } = tableState\nconst { getList, delList, getElTableExpose } = tableMethods\n\nconst tableColumns = reactive<TableColumn[]>([\n  {\n    field: 'id',\n    label: '字典编号',\n    width: '80px',\n    show: false,\n    disabled: false\n  },\n  {\n    field: 'dict_name',\n    label: '字典名称',\n    show: true,\n    disabled: true\n  },\n  {\n    field: 'dict_type',\n    label: '字典类型',\n    show: true,\n    disabled: true,\n    slots: {\n      default: (data: any) => {\n        // 复制字典类型\n        const toCopy = async (value: string) => {\n          // 复制功能打包部署到线上后，需要线上地址使用 https 才可使用\n          const { copy } = useClipboard()\n          await copy(value)\n          return ElMessage.success('复制成功')\n        }\n\n        const row = data.row\n        return (\n          <>\n            <span onClick={() => toCopy(row.dict_type)}>\n              <Icon icon=\"material-symbols:content-copy-rounded\" class=\"cursor-pointer\" />\n            </span>\n            <span>{row.dict_type}</span>\n          </>\n        )\n      }\n    }\n  },\n  {\n    field: 'disabled',\n    label: '是否禁用',\n    width: '120px',\n    show: true,\n    slots: {\n      default: (data: any) => {\n        const row = data.row\n        return (\n          <>\n            <ElSwitch modelValue={!row.disabled} disabled />\n          </>\n        )\n      }\n    }\n  },\n  {\n    field: 'remark',\n    label: '备注',\n    show: false\n  },\n  {\n    field: 'create_datetime',\n    label: '创建时间',\n    show: false\n  },\n  {\n    field: 'action',\n    width: '120px',\n    label: '操作',\n    show: true,\n    slots: {\n      default: (data: any) => {\n        const row = data.row\n        return (\n          <>\n            <BaseButton type=\"primary\" link size=\"small\" onClick={() => editAction(row)}>\n              编辑\n            </BaseButton>\n            <BaseButton\n              type=\"danger\"\n              loading={delLoading.value}\n              link\n              size=\"small\"\n              onClick={() => delData(row)}\n            >\n              删除\n            </BaseButton>\n          </>\n        )\n      }\n    }\n  }\n])\n\nconst searchSchema = reactive<FormSchema[]>([\n  {\n    field: 'dict_name',\n    label: '字典名称',\n    colProps: {\n      span: 24\n    },\n    component: 'Input',\n    componentProps: {\n      clearable: false\n    }\n  },\n  {\n    field: 'dict_type',\n    label: '字典类型',\n    colProps: {\n      span: 24\n    },\n    component: 'Input',\n    componentProps: {\n      clearable: false\n    }\n  }\n])\n\nconst searchParams = ref({})\nconst setSearchParams = (data: any) => {\n  currentPage.value = 1\n  searchParams.value = data\n  getList()\n}\n\nconst delLoading = ref(false)\n\nconst delData = async (row: any) => {\n  delLoading.value = true\n  await delList(true, [row.id]).finally(() => {\n    delLoading.value = false\n  })\n}\n\nconst dialogVisible = ref(false)\nconst dialogTitle = ref('')\n\nconst currentRow = ref()\nconst actionType = ref('')\n\nconst writeRef = ref<ComponentRef<typeof Write>>()\n\nconst saveLoading = ref(false)\n\nconst editAction = async (row: any) => {\n  const res = await getDictTypeApi(row.id)\n  if (res) {\n    dialogTitle.value = '编辑字典类型'\n    actionType.value = 'edit'\n    currentRow.value = res.data\n    dialogVisible.value = true\n  }\n}\n\nconst addAction = () => {\n  dialogTitle.value = '新增字典类型'\n  actionType.value = 'add'\n  currentRow.value = undefined\n  dialogVisible.value = true\n}\n\nconst save = async () => {\n  const write = unref(writeRef)\n  const formData = await write?.submit()\n  if (formData) {\n    saveLoading.value = true\n    try {\n      const res = ref({})\n      if (actionType.value === 'add') {\n        res.value = await addDictTypeListApi(formData)\n        if (res.value) {\n          dialogVisible.value = false\n          getList()\n        }\n      } else if (actionType.value === 'edit') {\n        res.value = await putDictTypeListApi(formData)\n        if (res.value) {\n          dialogVisible.value = false\n          getList()\n        }\n      }\n    } finally {\n      saveLoading.value = false\n    }\n  }\n}\n\nconst emit = defineEmits(['updateDictTypeId'])\n\nconst handleCurrentChange = async (val: any | undefined) => {\n  emit('updateDictTypeId', val ? val.id : val)\n}\n\nconst clearCurrentRow = async () => {\n  const elTableExpost = await getElTableExpose()\n  elTableExpost?.setCurrentRow(null)\n  emit('updateDictTypeId', null)\n}\n</script>\n\n<template>\n  <ContentWrap>\n    <Search :schema=\"searchSchema\" @reset=\"setSearchParams\" @search=\"setSearchParams\" />\n    <Table\n      v-model:current-page=\"currentPage\"\n      v-model:page-size=\"pageSize\"\n      showAction\n      activeUID=\"type\"\n      :columns=\"tableColumns\"\n      default-expand-all\n      :highlightCurrentRow=\"true\"\n      node-key=\"id\"\n      :data=\"dataList\"\n      :loading=\"loading\"\n      :pagination=\"{\n        total\n      }\"\n      @register=\"tableRegister\"\n      @current-change=\"handleCurrentChange\"\n      @refresh=\"getList\"\n    >\n      <template #toolbar>\n        <ElRow :gutter=\"10\">\n          <ElCol :span=\"1.5\">\n            <BaseButton type=\"primary\" @click=\"addAction\">新增字典类型</BaseButton>\n          </ElCol>\n          <ElCol :span=\"1.5\">\n            <BaseButton type=\"danger\" @click=\"clearCurrentRow\">清除选择</BaseButton>\n          </ElCol>\n        </ElRow>\n      </template>\n    </Table>\n  </ContentWrap>\n\n  <Dialog v-model=\"dialogVisible\" :title=\"dialogTitle\" :height=\"650\">\n    <Write ref=\"writeRef\" :current-row=\"currentRow\" />\n\n    <template #footer>\n      <BaseButton type=\"primary\" :loading=\"saveLoading\" @click=\"save\">\n        {{ t('exampleDemo.save') }}\n      </BaseButton>\n      <BaseButton @click=\"dialogVisible = false\">{{ t('dialogDemo.close') }}</BaseButton>\n    </template>\n  </Dialog>\n</template>\n"],"names":["t","useI18n","tableRegister","tableState","tableMethods","useTable","fetchDataApi","__async","pageSize","currentPage","res","getDictTypeListApi","__spreadValues","page","unref","limit","searchParams","list","data","total","count","fetchDelApi","value","delDictTypeListApi","code","clearCurrentRow","dataList","loading","getList","delList","getElTableExpose","tableColumns","reactive","field","label","width","show","disabled","slots","default","toCopy","copy","useClipboard","ElMessage","success","row","_createVNode2","_Fragment2","onClick","dict_type","Icon","ElSwitch","BaseButton","editAction","_createTextVNode2","delLoading","delData","searchSchema","colProps","span","component","componentProps","clearable","ref","setSearchParams","id","finally","dialogVisible","dialogTitle","currentRow","actionType","writeRef","saveLoading","getDictTypeApi","addAction","undefined","save","write","formData","submit","addDictTypeListApi","putDictTypeListApi","emit","__emit","handleCurrentChange","val","elTableExpost","setCurrentRow"],"mappings":"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"}