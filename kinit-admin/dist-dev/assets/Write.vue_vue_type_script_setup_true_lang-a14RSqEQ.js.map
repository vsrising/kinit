{"version":3,"file":"Write.vue_vue_type_script_setup_true_lang-a14RSqEQ.js","sources":["../../src/views/Vadmin/Auth/Role/components/Write.vue"],"sourcesContent":["<script setup lang=\"tsx\">\nimport { Form, FormSchema } from '@/components/Form'\nimport { useForm } from '@/hooks/web/useForm'\nimport { PropType, reactive, watch } from 'vue'\nimport { useValidator } from '@/hooks/web/useValidator'\n// import { ElTree } from 'element-plus'\n// import { getMenuRoleTreeOptionsApi } from '@/api/vadmin/auth/menu'\n// import { eachTree } from '@/utils/tree'\n\nconst { required } = useValidator()\n\nconst props = defineProps({\n  currentRow: {\n    type: Object as PropType<any>,\n    default: () => null\n  }\n})\n\n// let treeData = ref([] as any[])\n// const treeRef = ref<InstanceType<typeof ElTree>>()\n\n// const getMenuRoleTreeOptions = async () => {\n//   const res = await getMenuRoleTreeOptionsApi()\n//   if (res) {\n//     treeData.value = res.data\n//     await nextTick()\n//     if (props.currentRow) {\n//       const menu_ids: number[] = props.currentRow.menus.map((item) => item.id)\n//       const checked: number[] = []\n//       // 递归按顺序添加选中的菜单项，用于处理半选状态的菜单项\n//       eachTree(res.data, (v) => {\n//         if (menu_ids.includes(v.value)) {\n//           checked.push(v.value)\n//         }\n//       })\n//       for (const item of checked) {\n//         unref(treeRef)?.setChecked(item, true, false)\n//       }\n//     }\n//   }\n// }\n\n// const defaultProps = {\n//   children: 'children',\n//   label: 'label'\n// }\n\n// let selectAll = ref(false)\n// let defaultExpandAll = ref(true)\n// let checkStrictly = ref(true)\n\n// 获取所有节点的key\nconst getTreeNodeKeys = (nodes: Recordable[]): number[] => {\n  let keys = [] as number[]\n  for (let i = 0; i < nodes.length; i++) {\n    keys.push(nodes[i].value)\n    if (nodes[i].children && nodes[i].children.length > 0) {\n      keys = keys.concat(getTreeNodeKeys(nodes[i].children))\n    }\n  }\n  return keys\n}\n\n// // 展开/折叠\n// const handleCheckedTreeExpand = (value: boolean) => {\n//   defaultExpandAll.value = value\n//   for (let i = 0; i < treeData.value.length; i++) {\n//     treeRef.value!.store.nodesMap[treeData.value[i].value].expanded = value\n//   }\n// }\n\n// //全选/全不选\n// const handleCheckedTreeNodeAll = (value: boolean) => {\n//   selectAll.value = value\n//   treeRef.value!.setCheckedKeys(value ? getTreeNodeKeys(treeData.value) : [])\n// }\n\nconst formSchema = reactive<FormSchema[]>([\n  {\n    field: 'name',\n    label: '角色名称',\n    colProps: {\n      span: 12\n    },\n    component: 'Input'\n  },\n  {\n    field: 'role_key',\n    label: '权限字符',\n    colProps: {\n      span: 12\n    },\n    component: 'Input'\n  },\n  {\n    field: 'disabled',\n    label: '角色状态',\n    colProps: {\n      span: 12\n    },\n    component: 'RadioGroup',\n    componentProps: {\n      style: {\n        width: '100%'\n      },\n      options: [\n        {\n          label: '正常',\n          value: false\n        },\n        {\n          label: '禁用',\n          value: true\n        }\n      ]\n    },\n    value: false\n  },\n  {\n    field: 'is_admin',\n    label: '最高权限',\n    colProps: {\n      span: 12\n    },\n    component: 'RadioGroup',\n    componentProps: {\n      style: {\n        width: '100%'\n      },\n      options: [\n        {\n          label: '使用',\n          value: true\n        },\n        {\n          label: '不使用',\n          value: false\n        }\n      ]\n    },\n    value: false\n  },\n  {\n    field: 'order',\n    label: '显示排序',\n    colProps: {\n      span: 12\n    },\n    component: 'InputNumber',\n    componentProps: {\n      style: {\n        width: '100%'\n      }\n    }\n  },\n  {\n    field: 'desc',\n    label: '角色描述',\n    colProps: {\n      span: 24\n    },\n    component: 'Input',\n    componentProps: {\n      rows: 4,\n      type: 'textarea',\n      style: {\n        width: '600px'\n      }\n    }\n  }\n  // {\n  //   field: 'menu_ids',\n  //   label: '菜单权限',\n  //   colProps: {\n  //     span: 24\n  //   },\n  //   formItemProps: {\n  //     slots: {\n  //       default: () => {\n  //         return (\n  //           <>\n  //             <div>\n  //               <div>\n  //                 <ElCheckbox\n  //                   modelValue={defaultExpandAll.value}\n  //                   onChange={handleCheckedTreeExpand}\n  //                   label=\"展开/折叠\"\n  //                   size=\"large\"\n  //                 />\n  //                 <ElCheckbox\n  //                   modelValue={selectAll.value}\n  //                   onChange={handleCheckedTreeNodeAll}\n  //                   label=\"全选/全不选\"\n  //                   size=\"large\"\n  //                 />\n  //                 <ElCheckbox v-model={checkStrictly.value} label=\"父子联动\" size=\"large\" />\n  //               </div>\n  //               <div class=\"max-h-420px b-1 b-solid b-[#e5e7eb] p-10px overflow-auto\">\n  //                 <ElTree\n  //                   ref={treeRef}\n  //                   data={treeData.value}\n  //                   show-checkbox\n  //                   node-key=\"value\"\n  //                   props={defaultProps}\n  //                   default-expand-all={defaultExpandAll.value}\n  //                   check-strictly={!checkStrictly.value}\n  //                 ></ElTree>\n  //               </div>\n  //             </div>\n  //           </>\n  //         )\n  //       }\n  //     }\n  //   }\n  // }\n])\n\nconst rules = reactive({\n  name: [required()],\n  role_key: [required()],\n  order: [required()]\n})\n\nconst { formRegister, formMethods } = useForm()\nconst { setValues, getFormData, getElFormExpose } = formMethods\n\nconst submit = async () => {\n  const elForm = await getElFormExpose()\n  const valid = await elForm?.validate()\n  if (valid) {\n    const formData = await getFormData()\n    // formData.menu_ids = [\n    //   ...(unref(treeRef)?.getCheckedKeys() || []),\n    //   ...(unref(treeRef)?.getHalfCheckedKeys() || [])\n    // ]\n    return formData\n  }\n}\n\nwatch(\n  () => props.currentRow,\n  (currentRow) => {\n    if (!currentRow) return\n    setValues(currentRow)\n  },\n  {\n    deep: true,\n    immediate: true\n  }\n)\n\n// getMenuRoleTreeOptions()\n\ndefineExpose({\n  submit\n})\n</script>\n\n<template>\n  <Form :rules=\"rules\" @register=\"formRegister\" :schema=\"formSchema\" />\n</template>\n"],"names":["required","useValidator","props","__props","formSchema","reactive","field","label","colProps","span","component","componentProps","style","width","options","value","rows","type","rules","name","role_key","order","formRegister","formMethods","useForm","setValues","getFormData","getElFormExpose","submit","__async","elForm","validate","watch","currentRow","deep","immediate","__expose"],"mappings":"6dASA,KAAM,CAAEA,SAAAA,CAAU,EAAGC,EAAY,EAE3BC,EAAQC,EAkERC,EAAaC,EAAuB,CACxC,CACEC,MAAO,OACPC,MAAO,OACPC,SAAU,CACRC,KAAM,EACP,EACDC,UAAW,OACb,EACA,CACEJ,MAAO,WACPC,MAAO,OACPC,SAAU,CACRC,KAAM,EACP,EACDC,UAAW,OACb,EACA,CACEJ,MAAO,WACPC,MAAO,OACPC,SAAU,CACRC,KAAM,EACP,EACDC,UAAW,aACXC,eAAgB,CACdC,MAAO,CACLC,MAAO,MACR,EACDC,QAAS,CACP,CACEP,MAAO,KACPQ,MAAO,EACT,EACA,CACER,MAAO,KACPQ,MAAO,GACR,CAEJ,EACDA,MAAO,EACT,EACA,CACET,MAAO,WACPC,MAAO,OACPC,SAAU,CACRC,KAAM,EACP,EACDC,UAAW,aACXC,eAAgB,CACdC,MAAO,CACLC,MAAO,MACR,EACDC,QAAS,CACP,CACEP,MAAO,KACPQ,MAAO,EACT,EACA,CACER,MAAO,MACPQ,MAAO,GACR,CAEJ,EACDA,MAAO,EACT,EACA,CACET,MAAO,QACPC,MAAO,OACPC,SAAU,CACRC,KAAM,EACP,EACDC,UAAW,cACXC,eAAgB,CACdC,MAAO,CACLC,MAAO,MACT,CACF,CACF,EACA,CACEP,MAAO,OACPC,MAAO,OACPC,SAAU,CACRC,KAAM,EACP,EACDC,UAAW,QACXC,eAAgB,CACdK,KAAM,EACNC,KAAM,WACNL,MAAO,CACLC,MAAO,OACT,CACF,CACF,CA6CA,CACD,EAEKK,EAAQb,EAAS,CACrBc,KAAM,CAACnB,GAAU,EACjBoB,SAAU,CAACpB,GAAU,EACrBqB,MAAO,CAACrB,GAAU,CACpB,CAAC,EAEK,CAAEsB,aAAAA,EAAcC,YAAAA,CAAa,EAAGC,EAAO,EACvC,CAAEC,UAAAA,EAAWC,YAAAA,EAAaC,gBAAAA,CAAiB,EAAGJ,EAE9CK,EAAS,IAAYC,EAAA,sBACzB,MAAMC,EAAS,MAAMH,IAErB,GADc,MAAMG,GAAAA,YAAAA,EAAQC,WAO1B,OALiB,MAAML,MAS3BM,OAAAA,EACE,IAAM9B,EAAM+B,WACXA,GAAe,CACTA,GACLR,EAAUQ,CAAU,CACtB,EACA,CACEC,KAAM,GACNC,UAAW,EACb,CACF,EAIAC,EAAa,CACXR,OAAAA,CACF,CAAC"}