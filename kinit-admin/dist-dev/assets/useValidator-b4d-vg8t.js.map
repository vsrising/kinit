{"version":3,"file":"useValidator-b4d-vg8t.js","sources":["../../src/hooks/web/useValidator.ts"],"sourcesContent":["import { useI18n } from '@/hooks/web/useI18n'\nimport { isEmpty, isNullOrUnDef } from '@/utils/is'\nimport { FormItemRule } from 'element-plus'\n\nconst { t } = useI18n()\n\ntype Callback = (error?: string | Error | undefined) => void\n\ninterface LengthRange {\n  min: number\n  max: number\n  message?: string\n}\n\nexport const useValidator = () => {\n  const required = (message?: string): FormItemRule => {\n    return {\n      required: true,\n      message: message || t('common.required')\n    }\n  }\n\n  const lengthRange = (options: LengthRange): FormItemRule => {\n    const { min, max, message } = options\n\n    return {\n      min,\n      max,\n      message: message || t('common.lengthRange', { min, max })\n    }\n  }\n\n  const notSpace = (message?: string): FormItemRule => {\n    return {\n      validator: (_, val, callback) => {\n        if (val?.indexOf(' ') !== -1) {\n          callback(new Error(message || t('common.notSpace')))\n        } else {\n          callback()\n        }\n      }\n    }\n  }\n\n  const notSpecialCharacters = (message?: string): FormItemRule => {\n    return {\n      validator: (_, val, callback) => {\n        if (/[`~!@#$%^&*()_+<>?:\"{},.\\/;'[\\]]/gi.test(val)) {\n          callback(new Error(message || t('common.notSpecialCharacters')))\n        } else {\n          callback()\n        }\n      }\n    }\n  }\n\n  const isEmail = (rule: any, val: any, callback: Callback) => {\n    if (isEmpty(val) || isNullOrUnDef(val)) {\n      callback()\n    }\n    // 判断是否为邮箱地址\n    if (/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val)) {\n      callback()\n    } else {\n      callback(new Error('请填写正确的邮箱地址'))\n    }\n  }\n\n  const isTelephone = (rule: any, val: any, callback: Callback) => {\n    if (isEmpty(val) || isNullOrUnDef(val)) {\n      callback()\n    }\n    // 判断是否为正确手机号\n    if (/^1[3-9]\\d{9}$/.test(val)) {\n      callback()\n    } else {\n      callback(new Error('请填写正确的手机号'))\n    }\n  }\n\n  const isAmount = (rule: any, val: any, callback: Callback) => {\n    if (isEmpty(val) || isNullOrUnDef(val)) {\n      callback()\n    }\n    // 判断是否为正确金额\n    if (/^\\d+(\\.\\d{1,2})?$/.test(val)) {\n      callback()\n    } else {\n      callback(new Error('请填写正确的金额格式'))\n    }\n  }\n\n  return {\n    required,\n    lengthRange,\n    notSpace,\n    notSpecialCharacters,\n    isEmail,\n    isTelephone,\n    isAmount\n  }\n}\n"],"names":["t","useI18n","useValidator","message","options","min","max","_","val","callback","rule","isEmpty","isNullOrUnDef"],"mappings":"sDAIA,KAAM,CAAE,EAAAA,CAAE,EAAIC,IAUDC,EAAe,KA8EnB,CACL,SA9EgBC,IACT,CACL,SAAU,GACV,QAASA,GAAWH,EAAE,iBAAiB,CAAA,GA4EzC,YAxEmBI,GAAuC,CAC1D,KAAM,CAAE,IAAAC,EAAK,IAAAC,EAAK,QAAAH,CAAA,EAAYC,EAEvB,MAAA,CACL,IAAAC,EACA,IAAAC,EACA,QAASH,GAAWH,EAAE,qBAAsB,CAAE,IAAAK,EAAK,IAAAC,EAAK,CAAA,CAC1D,EAkEA,SA/DgBH,IACT,CACL,UAAW,CAACI,EAAGC,EAAKC,IAAa,EAC3BD,GAAA,YAAAA,EAAK,QAAQ,QAAS,GACxBC,EAAS,IAAI,MAAMN,GAAWH,EAAE,iBAAiB,CAAC,CAAC,EAE1CS,GAEb,CAAA,GAwDF,qBApD4BN,IACrB,CACL,UAAW,CAACI,EAAGC,EAAKC,IAAa,CAC3B,qCAAqC,KAAKD,CAAG,EAC/CC,EAAS,IAAI,MAAMN,GAAWH,EAAE,6BAA6B,CAAC,CAAC,EAEtDS,GAEb,CAAA,GA6CF,QAzCc,CAACC,EAAWF,EAAUC,IAAuB,EACvDE,EAAQH,CAAG,GAAKI,EAAcJ,CAAG,IAC1BC,IAGP,6BAA6B,KAAKD,CAAG,EAC9BC,IAEAA,EAAA,IAAI,MAAM,YAAY,CAAC,CAClC,EAiCA,YA9BkB,CAACC,EAAWF,EAAUC,IAAuB,EAC3DE,EAAQH,CAAG,GAAKI,EAAcJ,CAAG,IAC1BC,IAGP,gBAAgB,KAAKD,CAAG,EACjBC,IAEAA,EAAA,IAAI,MAAM,WAAW,CAAC,CACjC,EAsBA,SAnBe,CAACC,EAAWF,EAAUC,IAAuB,EACxDE,EAAQH,CAAG,GAAKI,EAAcJ,CAAG,IAC1BC,IAGP,oBAAoB,KAAKD,CAAG,EACrBC,IAEAA,EAAA,IAAI,MAAM,YAAY,CAAC,CAClC,CAUA"}