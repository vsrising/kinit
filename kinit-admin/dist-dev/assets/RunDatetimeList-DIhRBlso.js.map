{"version":3,"file":"RunDatetimeList-DIhRBlso.js","sources":["../../src/views/Vadmin/System/Task/components/RunDatetimeList.vue"],"sourcesContent":["<script setup>\nimport { ref } from 'vue'\nimport { propTypes } from '@/utils/propTypes'\n\nconst props = defineProps({\n  expression: propTypes.string.def('')\n})\n\nlet dateArr = []\nlet isShow = false\nlet dayRule = ''\nlet dayRuleSup = ''\nlet resultList = []\n\n/**\n * 计算 Cron 表达式最近五次运行时间结果\n * 感谢若依：http://vue.ruoyi.vip/monitor/job\n */\nconst expressionChange = (expression) => {\n  // 计算开始-隐藏结果\n  isShow = false\n  // 获取规则数组[0秒、1分、2时、3日、4月、5星期、6年]\n  let ruleArr = expression.split(' ')\n  // 用于记录进入循环的次数\n  let nums = 0\n  // 用于暂时存符号时间规则结果的数组\n  let resultArr = []\n  // 获取当前时间精确至[年、月、日、时、分、秒]\n  let nTime = new Date()\n  let nYear = nTime.getFullYear()\n  let nMonth = nTime.getMonth() + 1\n  let nDay = nTime.getDate()\n  let nHour = nTime.getHours()\n  let nMin = nTime.getMinutes()\n  let nSecond = nTime.getSeconds()\n  // 根据规则获取到近100年可能年数组、月数组等等\n  getSecondArr(ruleArr[0])\n  getMinArr(ruleArr[1])\n  getHourArr(ruleArr[2])\n  getDayArr(ruleArr[3])\n  getMonthArr(ruleArr[4])\n  getWeekArr(ruleArr[5])\n  getYearArr(ruleArr[6], nYear)\n  // 将获取到的数组赋值-方便使用\n  let sDate = dateArr[0]\n  let mDate = dateArr[1]\n  let hDate = dateArr[2]\n  let DDate = dateArr[3]\n  let MDate = dateArr[4]\n  let YDate = dateArr[5]\n  // 获取当前时间在数组中的索引\n  let sIdx = getIndex(sDate, nSecond)\n  let mIdx = getIndex(mDate, nMin)\n  let hIdx = getIndex(hDate, nHour)\n  let DIdx = getIndex(DDate, nDay)\n  let MIdx = getIndex(MDate, nMonth)\n  let YIdx = getIndex(YDate, nYear)\n  // 重置月日时分秒的函数(后面用的比较多)\n  const resetSecond = function () {\n    sIdx = 0\n    nSecond = sDate[sIdx]\n  }\n  const resetMin = function () {\n    mIdx = 0\n    nMin = mDate[mIdx]\n    resetSecond()\n  }\n  const resetHour = function () {\n    hIdx = 0\n    nHour = hDate[hIdx]\n    resetMin()\n  }\n  const resetDay = function () {\n    DIdx = 0\n    nDay = DDate[DIdx]\n    resetHour()\n  }\n  const resetMonth = function () {\n    MIdx = 0\n    nMonth = MDate[MIdx]\n    resetDay()\n  }\n  // 如果当前年份不为数组中当前值\n  if (nYear !== YDate[YIdx]) {\n    resetMonth()\n  }\n  // 如果当前月份不为数组中当前值\n  if (nMonth !== MDate[MIdx]) {\n    resetDay()\n  }\n  // 如果当前“日”不为数组中当前值\n  if (nDay !== DDate[DIdx]) {\n    resetHour()\n  }\n  // 如果当前“时”不为数组中当前值\n  if (nHour !== hDate[hIdx]) {\n    resetMin()\n  }\n  // 如果当前“分”不为数组中当前值\n  if (nMin !== mDate[mIdx]) {\n    resetSecond()\n  }\n\n  // 循环年份数组\n  goYear: for (let Yi = YIdx; Yi < YDate.length; Yi++) {\n    let YY = YDate[Yi]\n    // 如果到达最大值时\n    if (nMonth > MDate[MDate.length - 1]) {\n      resetMonth()\n      continue\n    }\n    // 循环月份数组\n    goMonth: for (let Mi = MIdx; Mi < MDate.length; Mi++) {\n      // 赋值、方便后面运算\n      let MM = MDate[Mi]\n      MM = MM < 10 ? '0' + MM : MM\n      // 如果到达最大值时\n      if (nDay > DDate[DDate.length - 1]) {\n        resetDay()\n        if (Mi == MDate.length - 1) {\n          resetMonth()\n          continue goYear\n        }\n        continue\n      }\n      // 循环日期数组\n      goDay: for (let Di = DIdx; Di < DDate.length; Di++) {\n        // 赋值、方便后面运算\n        let DD = DDate[Di]\n        let thisDD = DD < 10 ? '0' + DD : DD\n\n        // 如果到达最大值时\n        if (nHour > hDate[hDate.length - 1]) {\n          resetHour()\n          if (Di == DDate.length - 1) {\n            resetDay()\n            if (Mi == MDate.length - 1) {\n              resetMonth()\n              continue goYear\n            }\n            continue goMonth\n          }\n          continue\n        }\n\n        // 判断日期的合法性，不合法的话也是跳出当前循环\n        if (\n          checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true &&\n          dayRule !== 'workDay' &&\n          dayRule !== 'lastWeek' &&\n          dayRule !== 'lastDay'\n        ) {\n          resetDay()\n          continue goMonth\n        }\n        // 如果日期规则中有值时\n        if (dayRule == 'lastDay') {\n          // 如果不是合法日期则需要将前将日期调到合法日期即月末最后一天\n\n          if (checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n            while (DD > 0 && checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n              DD--\n\n              thisDD = DD < 10 ? '0' + DD : DD\n            }\n          }\n        } else if (dayRule == 'workDay') {\n          // 校验并调整如果是2月30号这种日期传进来时需调整至正常月底\n          if (checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n            while (DD > 0 && checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n              DD--\n              thisDD = DD < 10 ? '0' + DD : DD\n            }\n          }\n          // 获取达到条件的日期是星期X\n          let thisWeek = formatDate(new Date(YY + '-' + MM + '-' + thisDD + ' 00:00:00'), 'week')\n          // 当星期日时\n          if (thisWeek == 1) {\n            // 先找下一个日，并判断是否为月底\n            DD++\n            thisDD = DD < 10 ? '0' + DD : DD\n            // 判断下一日已经不是合法日期\n            if (checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n              DD -= 3\n            }\n          } else if (thisWeek == 7) {\n            // 当星期6时只需判断不是1号就可进行操作\n            if (dayRuleSup !== 1) {\n              DD--\n            } else {\n              DD += 2\n            }\n          }\n        } else if (dayRule == 'weekDay') {\n          // 如果指定了是星期几\n          // 获取当前日期是属于星期几\n          let thisWeek = formatDate(new Date(YY + '-' + MM + '-' + DD + ' 00:00:00'), 'week')\n          // 校验当前星期是否在星期池（dayRuleSup）中\n          if (dayRuleSup.indexOf(thisWeek) < 0) {\n            // 如果到达最大值时\n            if (Di == DDate.length - 1) {\n              resetDay()\n              if (Mi == MDate.length - 1) {\n                resetMonth()\n                continue goYear\n              }\n              continue goMonth\n            }\n            continue\n          }\n        } else if (dayRule == 'assWeek') {\n          // 如果指定了是第几周的星期几\n          // 获取每月1号是属于星期几\n          let thisWeek = formatDate(new Date(YY + '-' + MM + '-' + DD + ' 00:00:00'), 'week')\n          if (dayRuleSup[1] >= thisWeek) {\n            DD = (dayRuleSup[0] - 1) * 7 + dayRuleSup[1] - thisWeek + 1\n          } else {\n            DD = dayRuleSup[0] * 7 + dayRuleSup[1] - thisWeek + 1\n          }\n        } else if (dayRule == 'lastWeek') {\n          // 如果指定了每月最后一个星期几\n          // 校验并调整如果是2月30号这种日期传进来时需调整至正常月底\n          if (checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n            while (DD > 0 && checkDate(YY + '-' + MM + '-' + thisDD + ' 00:00:00') !== true) {\n              DD--\n              thisDD = DD < 10 ? '0' + DD : DD\n            }\n          }\n          // 获取月末最后一天是星期几\n          let thisWeek = formatDate(new Date(YY + '-' + MM + '-' + thisDD + ' 00:00:00'), 'week')\n          // 找到要求中最近的那个星期几\n          if (dayRuleSup < thisWeek) {\n            DD -= thisWeek - dayRuleSup\n          } else if (dayRuleSup > thisWeek) {\n            DD -= 7 - (dayRuleSup - thisWeek)\n          }\n        }\n        // 判断时间值是否小于10置换成“05”这种格式\n        DD = DD < 10 ? '0' + DD : DD\n\n        // 循环“时”数组\n        goHour: for (let hi = hIdx; hi < hDate.length; hi++) {\n          let hh = hDate[hi] < 10 ? '0' + hDate[hi] : hDate[hi]\n\n          // 如果到达最大值时\n          if (nMin > mDate[mDate.length - 1]) {\n            resetMin()\n            if (hi == hDate.length - 1) {\n              resetHour()\n              if (Di == DDate.length - 1) {\n                resetDay()\n                if (Mi == MDate.length - 1) {\n                  resetMonth()\n                  continue goYear\n                }\n                continue goMonth\n              }\n              continue goDay\n            }\n            continue\n          }\n          // 循环\"分\"数组\n          goMin: for (let mi = mIdx; mi < mDate.length; mi++) {\n            let mm = mDate[mi] < 10 ? '0' + mDate[mi] : mDate[mi]\n\n            // 如果到达最大值时\n            if (nSecond > sDate[sDate.length - 1]) {\n              resetSecond()\n              if (mi == mDate.length - 1) {\n                resetMin()\n                if (hi == hDate.length - 1) {\n                  resetHour()\n                  if (Di == DDate.length - 1) {\n                    resetDay()\n                    if (Mi == MDate.length - 1) {\n                      resetMonth()\n                      continue goYear\n                    }\n                    continue goMonth\n                  }\n                  continue goDay\n                }\n                continue goHour\n              }\n              continue\n            }\n            // 循环\"秒\"数组\n            goSecond: for (let si = sIdx; si <= sDate.length - 1; si++) {\n              let ss = sDate[si] < 10 ? '0' + sDate[si] : sDate[si]\n              // 添加当前时间（时间合法性在日期循环时已经判断）\n              if (MM !== '00' && DD !== '00') {\n                resultArr.push(YY + '-' + MM + '-' + DD + ' ' + hh + ':' + mm + ':' + ss)\n                nums++\n              }\n              // 如果条数满了就退出循环\n              if (nums == 5) break goYear\n              // 如果到达最大值时\n              if (si == sDate.length - 1) {\n                resetSecond()\n                if (mi == mDate.length - 1) {\n                  resetMin()\n                  if (hi == hDate.length - 1) {\n                    resetHour()\n                    if (Di == DDate.length - 1) {\n                      resetDay()\n                      if (Mi == MDate.length - 1) {\n                        resetMonth()\n                        continue goYear\n                      }\n                      continue goMonth\n                    }\n                    continue goDay\n                  }\n                  continue goHour\n                }\n                continue goMin\n              }\n            } //goSecond\n          } //goMin\n        } //goHour\n      } //goDay\n    } //goMonth\n  }\n  // 判断100年内的结果条数\n  if (resultArr.length == 0) {\n    resultList = ['没有达到条件的结果！']\n  } else {\n    resultList = resultArr\n    if (resultArr.length !== 5) {\n      resultList.push('最近100年内只有上面' + resultArr.length + '条结果！')\n    }\n  }\n  // 计算完成-显示结果\n  isShow = true\n}\n// 用于计算某位数字在数组中的索引\nconst getIndex = (arr, value) => {\n  if (value <= arr[0] || value > arr[arr.length - 1]) {\n    return 0\n  } else {\n    for (let i = 0; i < arr.length - 1; i++) {\n      if (value > arr[i] && value <= arr[i + 1]) {\n        return i + 1\n      }\n    }\n  }\n}\n// 获取\"年\"数组\nconst getYearArr = (rule, year) => {\n  dateArr[5] = getOrderArr(year, year + 100)\n  if (rule !== undefined) {\n    if (rule.indexOf('-') >= 0) {\n      dateArr[5] = getCycleArr(rule, year + 100, false)\n    } else if (rule.indexOf('/') >= 0) {\n      dateArr[5] = getAverageArr(rule, year + 100)\n    } else if (rule !== '*') {\n      dateArr[5] = getAssignArr(rule)\n    }\n  }\n}\n// 获取\"月\"数组\nconst getMonthArr = (rule) => {\n  dateArr[4] = getOrderArr(1, 12)\n  if (rule.indexOf('-') >= 0) {\n    dateArr[4] = getCycleArr(rule, 12, false)\n  } else if (rule.indexOf('/') >= 0) {\n    dateArr[4] = getAverageArr(rule, 12)\n  } else if (rule !== '*') {\n    dateArr[4] = getAssignArr(rule)\n  }\n}\n// 获取\"日\"数组-主要为日期规则\nconst getWeekArr = (rule) => {\n  // 只有当日期规则的两个值均为“”时则表达日期是有选项的\n  if (dayRule == '' && dayRuleSup == '') {\n    if (rule.indexOf('-') >= 0) {\n      dayRule = 'weekDay'\n      dayRuleSup = getCycleArr(rule, 7, false)\n    } else if (rule.indexOf('#') >= 0) {\n      dayRule = 'assWeek'\n      let matchRule = rule.match(/[0-9]{1}/g)\n      dayRuleSup = [Number(matchRule[1]), Number(matchRule[0])]\n      dateArr[3] = [1]\n      if (dayRuleSup[1] == 7) {\n        dayRuleSup[1] = 0\n      }\n    } else if (rule.indexOf('L') >= 0) {\n      dayRule = 'lastWeek'\n      dayRuleSup = Number(rule.match(/[0-9]{1,2}/g)[0])\n      dateArr[3] = [31]\n      if (dayRuleSup == 7) {\n        dayRuleSup = 0\n      }\n    } else if (rule !== '*' && rule !== '?') {\n      dayRule = 'weekDay'\n      dayRuleSup = getAssignArr(rule)\n    }\n  }\n}\n// 获取\"日\"数组-少量为日期规则\nconst getDayArr = (rule) => {\n  dateArr[3] = getOrderArr(1, 31)\n  dayRule = ''\n  dayRuleSup = ''\n  if (rule.indexOf('-') >= 0) {\n    dateArr[3] = getCycleArr(rule, 31, false)\n    dayRuleSup = 'null'\n  } else if (rule.indexOf('/') >= 0) {\n    dateArr[3] = getAverageArr(rule, 31)\n    dayRuleSup = 'null'\n  } else if (rule.indexOf('W') >= 0) {\n    dayRule = 'workDay'\n    dayRuleSup = Number(rule.match(/[0-9]{1,2}/g)[0])\n    dateArr[3] = [dayRuleSup]\n  } else if (rule.indexOf('L') >= 0) {\n    dayRule = 'lastDay'\n    dayRuleSup = 'null'\n    dateArr[3] = [31]\n  } else if (rule !== '*' && rule !== '?') {\n    dateArr[3] = getAssignArr(rule)\n    dayRuleSup = 'null'\n  } else if (rule == '*') {\n    dayRuleSup = 'null'\n  }\n}\n// 获取\"时\"数组\nconst getHourArr = (rule) => {\n  dateArr[2] = getOrderArr(0, 23)\n  if (rule.indexOf('-') >= 0) {\n    dateArr[2] = getCycleArr(rule, 24, true)\n  } else if (rule.indexOf('/') >= 0) {\n    dateArr[2] = getAverageArr(rule, 23)\n  } else if (rule !== '*') {\n    dateArr[2] = getAssignArr(rule)\n  }\n}\n// 获取\"分\"数组\nconst getMinArr = (rule) => {\n  dateArr[1] = getOrderArr(0, 59)\n  if (rule.indexOf('-') >= 0) {\n    dateArr[1] = getCycleArr(rule, 60, true)\n  } else if (rule.indexOf('/') >= 0) {\n    dateArr[1] = getAverageArr(rule, 59)\n  } else if (rule !== '*') {\n    dateArr[1] = getAssignArr(rule)\n  }\n}\n// 获取\"秒\"数组\nconst getSecondArr = (rule) => {\n  dateArr[0] = getOrderArr(0, 59)\n  if (rule.indexOf('-') >= 0) {\n    dateArr[0] = getCycleArr(rule, 60, true)\n  } else if (rule.indexOf('/') >= 0) {\n    dateArr[0] = getAverageArr(rule, 59)\n  } else if (rule !== '*') {\n    dateArr[0] = getAssignArr(rule)\n  }\n}\n// 根据传进来的min-max返回一个顺序的数组\nconst getOrderArr = (min, max) => {\n  let arr = []\n  for (let i = min; i <= max; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n// 根据规则中指定的零散值返回一个数组\nconst getAssignArr = (rule) => {\n  let arr = []\n  let assiginArr = rule.split(',')\n  for (let i = 0; i < assiginArr.length; i++) {\n    arr[i] = Number(assiginArr[i])\n  }\n  arr.sort(compare)\n  return arr\n}\n// 根据一定算术规则计算返回一个数组\nconst getAverageArr = (rule, limit) => {\n  let arr = []\n  let agArr = rule.split('/')\n  let min = Number(agArr[0])\n  let step = Number(agArr[1])\n  while (min <= limit) {\n    arr.push(min)\n    min += step\n  }\n  return arr\n}\n// 根据规则返回一个具有周期性的数组\nconst getCycleArr = (rule, limit, status) => {\n  // status--表示是否从0开始（则从1开始）\n  let arr = []\n  let cycleArr = rule.split('-')\n  let min = Number(cycleArr[0])\n  let max = Number(cycleArr[1])\n  if (min > max) {\n    max += limit\n  }\n  for (let i = min; i <= max; i++) {\n    let add = 0\n    if (status == false && i % limit == 0) {\n      add = limit\n    }\n    arr.push(Math.round((i % limit) + add))\n  }\n  arr.sort(compare)\n  return arr\n}\n// 比较数字大小（用于Array.sort）\nconst compare = (value1, value2) => {\n  if (value2 - value1 > 0) {\n    return -1\n  } else {\n    return 1\n  }\n}\n// 格式化日期格式如：2017-9-19 18:04:33\nconst formatDate = (value, type) => {\n  // 计算日期相关值\n  let time = typeof value == 'number' ? new Date(value) : value\n  let Y = time.getFullYear()\n  let M = time.getMonth() + 1\n  let D = time.getDate()\n  let h = time.getHours()\n  let m = time.getMinutes()\n  let s = time.getSeconds()\n  let week = time.getDay()\n  // 如果传递了type的话\n  if (type == undefined) {\n    return (\n      Y +\n      '-' +\n      (M < 10 ? '0' + M : M) +\n      '-' +\n      (D < 10 ? '0' + D : D) +\n      ' ' +\n      (h < 10 ? '0' + h : h) +\n      ':' +\n      (m < 10 ? '0' + m : m) +\n      ':' +\n      (s < 10 ? '0' + s : s)\n    )\n  } else if (type == 'week') {\n    // 在quartz中 1为星期日\n    return week + 1\n  }\n}\n// 检查日期是否存在\nconst checkDate = (value) => {\n  let time = new Date(value)\n  let format = formatDate(time)\n  return value === format\n}\n\n// 执行\nexpressionChange(props.expression)\n</script>\n\n<template>\n  <ol class=\"text-center\">\n    <li v-for=\"(item, index) in resultList\" :key=\"index\" class=\"leading-9\"> {{ item }}</li>\n  </ol>\n</template>\n\n<style lang=\"scss\" scoped></style>\n"],"names":["props","__props","dateArr","dayRule","dayRuleSup","resultList","expressionChange","expression","ruleArr","nums","resultArr","nTime","nYear","nMonth","nDay","nHour","nMin","nSecond","getSecondArr","getMinArr","getHourArr","getDayArr","getMonthArr","getWeekArr","getYearArr","sDate","mDate","hDate","DDate","MDate","YDate","sIdx","getIndex","mIdx","hIdx","DIdx","MIdx","YIdx","resetSecond","resetMin","resetHour","resetDay","resetMonth","goYear","Yi","YY","goMonth","Mi","MM","goDay","Di","DD","thisDD","checkDate","thisWeek","formatDate","goHour","hi","hh","goMin","mi","mm","si","ss","arr","value","i","rule","year","getOrderArr","getCycleArr","getAverageArr","getAssignArr","matchRule","min","max","assiginArr","compare","limit","agArr","step","status","cycleArr","add","value1","value2","type","time","Y","M","h","m","s","week","format"],"mappings":"2QAIA,MAAMA,EAAQC,EAId,IAAIC,EAAU,CAAE,EAEZC,EAAU,GACVC,EAAa,GACbC,EAAa,CAAE,EAMnB,MAAMC,GAAoBC,GAAe,CAIvC,IAAIC,EAAUD,EAAW,MAAM,GAAG,EAE9BE,EAAO,EAEPC,EAAY,CAAE,EAEdC,EAAQ,IAAI,KACZC,EAAQD,EAAM,YAAa,EAC3BE,EAASF,EAAM,SAAQ,EAAK,EAC5BG,EAAOH,EAAM,QAAS,EACtBI,EAAQJ,EAAM,SAAU,EACxBK,EAAOL,EAAM,WAAY,EACzBM,EAAUN,EAAM,WAAY,EAEhCO,GAAaV,EAAQ,CAAC,CAAC,EACvBW,GAAUX,EAAQ,CAAC,CAAC,EACpBY,GAAWZ,EAAQ,CAAC,CAAC,EACrBa,GAAUb,EAAQ,CAAC,CAAC,EACpBc,GAAYd,EAAQ,CAAC,CAAC,EACtBe,GAAWf,EAAQ,CAAC,CAAC,EACrBgB,GAAWhB,EAAQ,CAAC,EAAGI,CAAK,EAE5B,IAAIa,EAAQvB,EAAQ,CAAC,EACjBwB,EAAQxB,EAAQ,CAAC,EACjByB,EAAQzB,EAAQ,CAAC,EACjB0B,EAAQ1B,EAAQ,CAAC,EACjB2B,EAAQ3B,EAAQ,CAAC,EACjB4B,EAAQ5B,EAAQ,CAAC,EAEjB6B,EAAOC,EAASP,EAAOR,CAAO,EAC9BgB,EAAOD,EAASN,EAAOV,CAAI,EAC3BkB,EAAOF,EAASL,EAAOZ,CAAK,EAC5BoB,EAAOH,EAASJ,EAAOd,CAAI,EAC3BsB,EAAOJ,EAASH,EAAOhB,CAAM,EAC7BwB,EAAOL,EAASF,EAAOlB,CAAK,EAEhC,MAAM0B,EAAc,UAAY,CAC9BP,EAAO,EACPd,EAAUQ,EAAMM,CAAI,CACrB,EACKQ,EAAW,UAAY,CAC3BN,EAAO,EACPjB,EAAOU,EAAMO,CAAI,EACjBK,EAAa,CACd,EACKE,EAAY,UAAY,CAC5BN,EAAO,EACPnB,EAAQY,EAAMO,CAAI,EAClBK,EAAU,CACX,EACKE,EAAW,UAAY,CAC3BN,EAAO,EACPrB,EAAOc,EAAMO,CAAI,EACjBK,EAAW,CACZ,EACKE,EAAa,UAAY,CAC7BN,EAAO,EACPvB,EAASgB,EAAMO,CAAI,EACnBK,EAAU,CACX,EAEG7B,IAAUkB,EAAMO,CAAI,GACtBK,EAAY,EAGV7B,IAAWgB,EAAMO,CAAI,GACvBK,EAAU,EAGR3B,IAASc,EAAMO,CAAI,GACrBK,EAAW,EAGTzB,IAAUY,EAAMO,CAAI,GACtBK,EAAU,EAGRvB,IAASU,EAAMO,CAAI,GACrBK,EAAa,EAIfK,EAAQ,QAASC,EAAKP,EAAMO,EAAKd,EAAM,OAAQc,IAAM,CACnD,IAAIC,EAAKf,EAAMc,CAAE,EAEjB,GAAI/B,EAASgB,EAAMA,EAAM,OAAS,CAAC,EAAG,CACpCa,EAAY,EACZ,QACD,CAEDI,EAAS,QAASC,EAAKX,EAAMW,EAAKlB,EAAM,OAAQkB,IAAM,CAEpD,IAAIC,EAAKnB,EAAMkB,CAAE,EAGjB,GAFAC,EAAKA,EAAK,GAAK,IAAMA,EAAKA,EAEtBlC,EAAOc,EAAMA,EAAM,OAAS,CAAC,EAAG,CAElC,GADAa,EAAU,EACNM,GAAMlB,EAAM,OAAS,EAAG,CAC1Ba,EAAY,EACZ,SAASC,CACV,CACD,QACD,CAEDM,EAAO,QAASC,EAAKf,EAAMe,EAAKtB,EAAM,OAAQsB,IAAM,CAElD,IAAIC,EAAKvB,EAAMsB,CAAE,EACbE,EAASD,EAAK,GAAK,IAAMA,EAAKA,EAGlC,GAAIpC,EAAQY,EAAMA,EAAM,OAAS,CAAC,EAAG,CAEnC,GADAa,EAAW,EACPU,GAAMtB,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAU,EACNM,GAAMlB,EAAM,OAAS,EAAG,CAC1Ba,EAAY,EACZ,SAASC,CACV,CACD,SAASG,CACV,CACD,QACD,CAGD,GACEO,EAAUR,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,IAAM,IAC1DjD,IAAY,WACZA,IAAY,YACZA,IAAY,UACZ,CACAsC,EAAU,EACV,SAASK,CACV,CAED,GAAI3C,GAAW,WAGb,GAAIkD,EAAUR,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,IAAM,GAC5D,KAAOD,EAAK,GAAKE,EAAUR,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,IAAM,IACzED,IAEAC,EAASD,EAAK,GAAK,IAAMA,EAAKA,UAGzBhD,GAAW,UAAW,CAE/B,GAAIkD,EAAUR,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,IAAM,GAC5D,KAAOD,EAAK,GAAKE,EAAUR,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,IAAM,IACzED,IACAC,EAASD,EAAK,GAAK,IAAMA,EAAKA,EAIlC,IAAIG,EAAWC,EAAW,IAAI,KAAKV,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,EAAG,MAAM,EAElFE,GAAY,GAEdH,IACAC,EAASD,EAAK,GAAK,IAAMA,EAAKA,EAE1BE,EAAUR,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,IAAM,KAC5DD,GAAM,IAECG,GAAY,IAEjBlD,IAAe,EACjB+C,IAEAA,GAAM,EAGpB,SAAmBhD,GAAW,UAAW,CAG/B,IAAImD,EAAWC,EAAW,IAAI,KAAKV,EAAK,IAAMG,EAAK,IAAMG,EAAK,WAAW,EAAG,MAAM,EAElF,GAAI/C,EAAW,QAAQkD,CAAQ,EAAI,EAAG,CAEpC,GAAIJ,GAAMtB,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAU,EACNM,GAAMlB,EAAM,OAAS,EAAG,CAC1Ba,EAAY,EACZ,SAASC,CACV,CACD,SAASG,CACV,CACD,QACD,CACX,SAAmB3C,GAAW,UAAW,CAG/B,IAAImD,EAAWC,EAAW,IAAI,KAAKV,EAAK,IAAMG,EAAK,IAAMG,EAAK,WAAW,EAAG,MAAM,EAC9E/C,EAAW,CAAC,GAAKkD,EACnBH,GAAM/C,EAAW,CAAC,EAAI,GAAK,EAAIA,EAAW,CAAC,EAAIkD,EAAW,EAE1DH,EAAK/C,EAAW,CAAC,EAAI,EAAIA,EAAW,CAAC,EAAIkD,EAAW,CAEhE,SAAmBnD,GAAW,WAAY,CAGhC,GAAIkD,EAAUR,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,IAAM,GAC5D,KAAOD,EAAK,GAAKE,EAAUR,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,IAAM,IACzED,IACAC,EAASD,EAAK,GAAK,IAAMA,EAAKA,EAIlC,IAAIG,EAAWC,EAAW,IAAI,KAAKV,EAAK,IAAMG,EAAK,IAAMI,EAAS,WAAW,EAAG,MAAM,EAElFhD,EAAakD,EACfH,GAAMG,EAAWlD,EACRA,EAAakD,IACtBH,GAAM,GAAK/C,EAAakD,GAE3B,CAEDH,EAAKA,EAAK,GAAK,IAAMA,EAAKA,EAG1BK,EAAQ,QAASC,EAAKvB,EAAMuB,EAAK9B,EAAM,OAAQ8B,IAAM,CACnD,IAAIC,GAAK/B,EAAM8B,CAAE,EAAI,GAAK,IAAM9B,EAAM8B,CAAE,EAAI9B,EAAM8B,CAAE,EAGpD,GAAIzC,EAAOU,EAAMA,EAAM,OAAS,CAAC,EAAG,CAElC,GADAa,EAAU,EACNkB,GAAM9B,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAW,EACPU,GAAMtB,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAU,EACNM,GAAMlB,EAAM,OAAS,EAAG,CAC1Ba,EAAY,EACZ,SAASC,CACV,CACD,SAASG,CACV,CACD,SAASG,CACV,CACD,QACD,CAEDU,EAAO,QAASC,EAAK3B,EAAM2B,EAAKlC,EAAM,OAAQkC,IAAM,CAClD,IAAIC,GAAKnC,EAAMkC,CAAE,EAAI,GAAK,IAAMlC,EAAMkC,CAAE,EAAIlC,EAAMkC,CAAE,EAGpD,GAAI3C,EAAUQ,EAAMA,EAAM,OAAS,CAAC,EAAG,CAErC,GADAa,EAAa,EACTsB,GAAMlC,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAU,EACNkB,GAAM9B,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAW,EACPU,GAAMtB,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAU,EACNM,GAAMlB,EAAM,OAAS,EAAG,CAC1Ba,EAAY,EACZ,SAASC,CACV,CACD,SAASG,CACV,CACD,SAASG,CACV,CACD,SAASO,CACV,CACD,QACD,CAES,QAASM,EAAK/B,EAAM+B,GAAMrC,EAAM,OAAS,EAAGqC,IAAM,CAC1D,IAAIC,GAAKtC,EAAMqC,CAAE,EAAI,GAAK,IAAMrC,EAAMqC,CAAE,EAAIrC,EAAMqC,CAAE,EAOpD,GALId,IAAO,MAAQG,IAAO,OACxBzC,EAAU,KAAKmC,EAAK,IAAMG,EAAK,IAAMG,EAAK,IAAMO,GAAK,IAAMG,GAAK,IAAME,EAAE,EACxEtD,KAGEA,GAAQ,EAAG,MAAMkC,EAErB,GAAImB,GAAMrC,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAa,EACTsB,GAAMlC,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAU,EACNkB,GAAM9B,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAW,EACPU,GAAMtB,EAAM,OAAS,EAAG,CAE1B,GADAa,EAAU,EACNM,GAAMlB,EAAM,OAAS,EAAG,CAC1Ba,EAAY,EACZ,SAASC,CACV,CACD,SAASG,CACV,CACD,SAASG,CACV,CACD,SAASO,CACV,CACD,SAASG,CACV,CACF,CACF,CACF,CACF,CACF,CACF,CAEGjD,EAAU,QAAU,EACtBL,EAAa,CAAC,YAAY,GAE1BA,EAAaK,EACTA,EAAU,SAAW,GACvBL,EAAW,KAAK,cAAgBK,EAAU,OAAS,MAAM,EAK/D,EAEMsB,EAAW,CAACgC,EAAKC,IAAU,CAC/B,GAAIA,GAASD,EAAI,CAAC,GAAKC,EAAQD,EAAIA,EAAI,OAAS,CAAC,EAC/C,MAAO,GAEP,QAASE,EAAI,EAAGA,EAAIF,EAAI,OAAS,EAAGE,IAClC,GAAID,EAAQD,EAAIE,CAAC,GAAKD,GAASD,EAAIE,EAAI,CAAC,EACtC,OAAOA,EAAI,CAInB,EAEM1C,GAAa,CAAC2C,EAAMC,IAAS,CACjClE,EAAQ,CAAC,EAAImE,EAAYD,EAAMA,EAAO,GAAG,EACrCD,IAAS,SACPA,EAAK,QAAQ,GAAG,GAAK,EACvBjE,EAAQ,CAAC,EAAIoE,EAAYH,EAAMC,EAAO,IAAK,EAAK,EACvCD,EAAK,QAAQ,GAAG,GAAK,EAC9BjE,EAAQ,CAAC,EAAIqE,EAAcJ,EAAMC,EAAO,GAAG,EAClCD,IAAS,MAClBjE,EAAQ,CAAC,EAAIsE,EAAaL,CAAI,GAGpC,EAEM7C,GAAe6C,GAAS,CAC5BjE,EAAQ,CAAC,EAAImE,EAAY,EAAG,EAAE,EAC1BF,EAAK,QAAQ,GAAG,GAAK,EACvBjE,EAAQ,CAAC,EAAIoE,EAAYH,EAAM,GAAI,EAAK,EAC/BA,EAAK,QAAQ,GAAG,GAAK,EAC9BjE,EAAQ,CAAC,EAAIqE,EAAcJ,EAAM,EAAE,EAC1BA,IAAS,MAClBjE,EAAQ,CAAC,EAAIsE,EAAaL,CAAI,EAElC,EAEM5C,GAAc4C,GAAS,CAE3B,GAAIhE,GAAW,IAAMC,GAAc,GACjC,GAAI+D,EAAK,QAAQ,GAAG,GAAK,EACvBhE,EAAU,UACVC,EAAakE,EAAYH,EAAM,EAAG,EAAK,UAC9BA,EAAK,QAAQ,GAAG,GAAK,EAAG,CACjChE,EAAU,UACV,IAAIsE,EAAYN,EAAK,MAAM,WAAW,EACtC/D,EAAa,CAAC,OAAOqE,EAAU,CAAC,CAAC,EAAG,OAAOA,EAAU,CAAC,CAAC,CAAC,EACxDvE,EAAQ,CAAC,EAAI,CAAC,CAAC,EACXE,EAAW,CAAC,GAAK,IACnBA,EAAW,CAAC,EAAI,EAEnB,MAAU+D,EAAK,QAAQ,GAAG,GAAK,GAC9BhE,EAAU,WACVC,EAAa,OAAO+D,EAAK,MAAM,aAAa,EAAE,CAAC,CAAC,EAChDjE,EAAQ,CAAC,EAAI,CAAC,EAAE,EACZE,GAAc,IAChBA,EAAa,IAEN+D,IAAS,KAAOA,IAAS,MAClChE,EAAU,UACVC,EAAaoE,EAAaL,CAAI,EAGpC,EAEM9C,GAAa8C,GAAS,CAC1BjE,EAAQ,CAAC,EAAImE,EAAY,EAAG,EAAE,EAC9BlE,EAAU,GACVC,EAAa,GACT+D,EAAK,QAAQ,GAAG,GAAK,GACvBjE,EAAQ,CAAC,EAAIoE,EAAYH,EAAM,GAAI,EAAK,EACxC/D,EAAa,QACJ+D,EAAK,QAAQ,GAAG,GAAK,GAC9BjE,EAAQ,CAAC,EAAIqE,EAAcJ,EAAM,EAAE,EACnC/D,EAAa,QACJ+D,EAAK,QAAQ,GAAG,GAAK,GAC9BhE,EAAU,UACVC,EAAa,OAAO+D,EAAK,MAAM,aAAa,EAAE,CAAC,CAAC,EAChDjE,EAAQ,CAAC,EAAI,CAACE,CAAU,GACf+D,EAAK,QAAQ,GAAG,GAAK,GAC9BhE,EAAU,UACVC,EAAa,OACbF,EAAQ,CAAC,EAAI,CAAC,EAAE,GACPiE,IAAS,KAAOA,IAAS,KAClCjE,EAAQ,CAAC,EAAIsE,EAAaL,CAAI,EAC9B/D,EAAa,QACJ+D,GAAQ,MACjB/D,EAAa,OAEjB,EAEMgB,GAAc+C,GAAS,CAC3BjE,EAAQ,CAAC,EAAImE,EAAY,EAAG,EAAE,EAC1BF,EAAK,QAAQ,GAAG,GAAK,EACvBjE,EAAQ,CAAC,EAAIoE,EAAYH,EAAM,GAAI,EAAI,EAC9BA,EAAK,QAAQ,GAAG,GAAK,EAC9BjE,EAAQ,CAAC,EAAIqE,EAAcJ,EAAM,EAAE,EAC1BA,IAAS,MAClBjE,EAAQ,CAAC,EAAIsE,EAAaL,CAAI,EAElC,EAEMhD,GAAagD,GAAS,CAC1BjE,EAAQ,CAAC,EAAImE,EAAY,EAAG,EAAE,EAC1BF,EAAK,QAAQ,GAAG,GAAK,EACvBjE,EAAQ,CAAC,EAAIoE,EAAYH,EAAM,GAAI,EAAI,EAC9BA,EAAK,QAAQ,GAAG,GAAK,EAC9BjE,EAAQ,CAAC,EAAIqE,EAAcJ,EAAM,EAAE,EAC1BA,IAAS,MAClBjE,EAAQ,CAAC,EAAIsE,EAAaL,CAAI,EAElC,EAEMjD,GAAgBiD,GAAS,CAC7BjE,EAAQ,CAAC,EAAImE,EAAY,EAAG,EAAE,EAC1BF,EAAK,QAAQ,GAAG,GAAK,EACvBjE,EAAQ,CAAC,EAAIoE,EAAYH,EAAM,GAAI,EAAI,EAC9BA,EAAK,QAAQ,GAAG,GAAK,EAC9BjE,EAAQ,CAAC,EAAIqE,EAAcJ,EAAM,EAAE,EAC1BA,IAAS,MAClBjE,EAAQ,CAAC,EAAIsE,EAAaL,CAAI,EAElC,EAEME,EAAc,CAACK,EAAKC,IAAQ,CAChC,IAAIX,EAAM,CAAE,EACZ,QAASE,EAAIQ,EAAKR,GAAKS,EAAKT,IAC1BF,EAAI,KAAKE,CAAC,EAEZ,OAAOF,CACT,EAEMQ,EAAgBL,GAAS,CAC7B,IAAIH,EAAM,CAAE,EACRY,EAAaT,EAAK,MAAM,GAAG,EAC/B,QAASD,EAAI,EAAGA,EAAIU,EAAW,OAAQV,IACrCF,EAAIE,CAAC,EAAI,OAAOU,EAAWV,CAAC,CAAC,EAE/B,OAAAF,EAAI,KAAKa,CAAO,EACTb,CACT,EAEMO,EAAgB,CAACJ,EAAMW,IAAU,CACrC,IAAId,EAAM,CAAE,EACRe,EAAQZ,EAAK,MAAM,GAAG,EACtBO,EAAM,OAAOK,EAAM,CAAC,CAAC,EACrBC,EAAO,OAAOD,EAAM,CAAC,CAAC,EAC1B,KAAOL,GAAOI,GACZd,EAAI,KAAKU,CAAG,EACZA,GAAOM,EAET,OAAOhB,CACT,EAEMM,EAAc,CAACH,EAAMW,EAAOG,IAAW,CAE3C,IAAIjB,EAAM,CAAE,EACRkB,EAAWf,EAAK,MAAM,GAAG,EACzBO,EAAM,OAAOQ,EAAS,CAAC,CAAC,EACxBP,EAAM,OAAOO,EAAS,CAAC,CAAC,EACxBR,EAAMC,IACRA,GAAOG,GAET,QAASZ,EAAIQ,EAAKR,GAAKS,EAAKT,IAAK,CAC/B,IAAIiB,EAAM,EACNF,GAAU,IAASf,EAAIY,GAAS,IAClCK,EAAML,GAERd,EAAI,KAAK,KAAK,MAAOE,EAAIY,EAASK,CAAG,CAAC,CACvC,CACD,OAAAnB,EAAI,KAAKa,CAAO,EACTb,CACT,EAEMa,EAAU,CAACO,EAAQC,IACnBA,EAASD,EAAS,EACb,GAEA,EAIL7B,EAAa,CAACU,EAAOqB,IAAS,CAElC,IAAIC,EAAO,OAAOtB,GAAS,SAAW,IAAI,KAAKA,CAAK,EAAIA,EACpDuB,EAAID,EAAK,YAAa,EACtBE,EAAIF,EAAK,SAAQ,EAAK,EACtB,EAAIA,EAAK,QAAS,EAClBG,EAAIH,EAAK,SAAU,EACnBI,EAAIJ,EAAK,WAAY,EACrBK,EAAIL,EAAK,WAAY,EACrBM,EAAON,EAAK,OAAQ,EAExB,GAAID,GAAQ,KACV,OACEE,EACA,KACCC,EAAI,GAAK,IAAMA,EAAIA,GACpB,KACC,EAAI,GAAK,IAAM,EAAI,GACpB,KACCC,EAAI,GAAK,IAAMA,EAAIA,GACpB,KACCC,EAAI,GAAK,IAAMA,EAAIA,GACpB,KACCC,EAAI,GAAK,IAAMA,EAAIA,GAEjB,GAAIN,GAAQ,OAEjB,OAAOO,EAAO,CAElB,EAEMxC,EAAaY,GAAU,CAC3B,IAAIsB,EAAO,IAAI,KAAKtB,CAAK,EACrB6B,EAASvC,EAAWgC,CAAI,EAC5B,OAAOtB,IAAU6B,CACnB,EAGA,OAAAxF,GAAiBN,EAAM,UAAU"}